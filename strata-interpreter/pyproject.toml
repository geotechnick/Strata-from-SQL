[build-system]
requires = ["setuptools>=68.0.0", "wheel>=0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name = "strata-interpreter"
version = "0.1.0"
description = "Professional geotechnical strata interpretation and design parameter assignment tool"
authors = [
    {name = "Geotechnical Engineering Team", email = "info@geotechnick.com"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: Microsoft :: Windows",
]

dependencies = [
    "PyQt6>=6.6.0",
    "PyQt6-WebEngine>=6.6.0",
    "SQLAlchemy>=2.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "pyqtgraph>=0.13.0",
    "folium>=0.14.0",
    "jsonschema>=4.17.0",
    "scipy>=1.10.0",
    "openpyxl>=3.1.0",
    "pyproj>=3.5.0",
    "pathlib2>=2.3.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.2.0",
    "black>=23.3.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "isort>=5.12.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "pre-commit>=3.3.0",
    "tox>=4.6.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
    "PyInstaller>=5.13.0",
]

[project.scripts]
strata-interpreter = "main:main"

[project.urls]
Homepage = "https://github.com/geotechnick/strata-interpreter"
Repository = "https://github.com/geotechnick/strata-interpreter.git"
Issues = "https://github.com/geotechnick/strata-interpreter/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["resources/**/*", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "gui", "utils"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]